from compile import *
from dotenv import load_dotenv
import sys
from utils.utils import *
from eth_account.messages import encode_defunct, _hash_eip191_message


def to_32byte_hex(val):
    return Web3.toHex(Web3.toBytes(val).rjust(32, b'\0'))

if len(sys.argv) < 3:
    print("please enter an ASN and its address to add to ASNMap")
    sys.exit(-1)

inASN = int(sys.argv[1])
inAddress = Web3.toChecksumAddress(sys.argv[2])
print(inAddress)


load_dotenv()

w3 = Web3(Web3.HTTPProvider(os.getenv("GANACHE_RPC_URL")))
chain_id = 1337

acct0_address = os.getenv("ACCOUNT_ADDRESS")
acct0_private_key = os.getenv("PRIVATE_KEY")

acct1_address = os.getenv("ACCOUNT2_ADDRESS")
acct1_private_key = os.getenv("ACCOUNT2_PRIVATE_KEY")

# ABI (Application Binary Interface), An interface for interacting with methods in a smart contract 
abi = json.loads(
    compiled_sol["contracts"]["IANA.sol"]["IANA"]["metadata"]
    )["output"]["abi"]

#  call deploy.py Will get contract_address
contract_address = os.getenv("CONTRACT_ADDRESS")

nonce = w3.eth.get_transaction_count(acct0_address)

#  Instantiate the contract object 
iana = w3.eth.contract(address=contract_address, abi=abi)

# GENERATED BY ACCT1 (trying to get the ASN<=>Acct1_addr binding)
base_message = Web3.soliditySha3(['uint32', 'address'], [inASN, inAddress])
print("msg from solidity sha: " + str(base_message))
message = encode_defunct(primitive=base_message)
# sign message with Acct 1's private key
signed_message = w3.eth.account.sign_message(message, private_key=acct1_private_key)

ec_recover_args = (msghash, v, r, s) = (
    Web3.toHex(signed_message.messageHash),
    signed_message.v,
    to_32byte_hex(signed_message.r),
    to_32byte_hex(signed_message.s),
)
print(ec_recover_args)

print("-------------------")

# GENERATED BY ACCT0 (IANA/CONTRACT OWNER)
base_message_iana = Web3.soliditySha3(['uint32', 'address'], [inASN, inAddress])
hex_signature = signed_message.signature.hex()
message_iana = encode_defunct(primitive=base_message_iana)

message_hash = _hash_eip191_message(message_iana)
hex_message_hash = Web3.toHex(message_hash)

sig = Web3.toBytes(hexstr=hex_signature)
v, hex_r, hex_s = Web3.toInt(sig[-1]), Web3.toHex(sig[:32]), Web3.toHex(sig[32:64])
ec_recover_args = (hex_message_hash, v, hex_r, hex_s)

print(ec_recover_args)

#  call addPrefix Method 
transaction = iana.functions.IANA_addASN(inASN, inAddress, v, hex_r, hex_s).buildTransaction({
    "gasPrice": w3.eth.gas_price,
    "chainId": chain_id,
    "from": acct0_address,
    "nonce": nonce
})

#  Signature 
signed_transaction = w3.eth.account.sign_transaction(transaction, private_key=acct0_private_key)
#  Sending transaction 
tx_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)
print('add new ASN<=>IP/mask binding to contract...')
#  Waiting for the deal to complete 
tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
print("ASN<=>IP/mask added")