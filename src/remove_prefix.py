from dotenv import load_dotenv
import sys
from utils.utils import *
from ipaddress import IPv4Address

if len(sys.argv) < 3:
    print("please enter an IP and Subnet (aka prefix) to remove")
    sys.exit(-1)

inIP = IPv4Address(sys.argv[1])
inSubnet = int(sys.argv[2])

load_dotenv()
w3 = Web3(Web3.HTTPProvider(os.getenv("GANACHE_RPC_URL")))
chain_id = utils.load_chain_id()

# acct1_address, acct1_private_key = utils.load_account_from_env(0)
acct1_address, acct1_private_key = utils.load_account_from_env(1)
# acct1_address, acct1_private_key = utils.load_account_from_env(2)

contract_address = utils.load_contract_address("CONTRACT_ADDRESS")

# ABI (Application Binary Interface), An interface for interacting with methods in a smart contract 
abi = utils.get_contract_abi("IANA")
nonce = w3.eth.get_transaction_count(acct1_address)

#  Instantiate the contract object 
iana = w3.eth.contract(address=contract_address, abi=abi)

# GENERATED BY ACCT1: Owner of prefix must call this function! 
# Can't delete someone else's prefix!
transaction = iana.functions.prefix_removePrefix(int(inIP), inSubnet).buildTransaction({
    "gasPrice": w3.eth.gas_price,
    "chainId": chain_id,
    "from": acct1_address,
    "nonce": nonce
})

signed_transaction, err = utils.sign_transaction(w3, transaction, acct1_private_key)
if err:
    sys.exit(-1)

tx_hash, tx_receipt, err = utils.send_transaction(w3, signed_transaction)
if err:
    sys.exit(-1)

print("SUCCESS: prefix " + str(inIP) + "/" + str(inSubnet) + " removed! Prefix returned to IANA")